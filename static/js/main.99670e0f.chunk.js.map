{"version":3,"sources":["components/score.js","components/displayanswers.js","components/displayquestions.js","components/content.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["Score","props","increaseScore","setState","score","state","decreaseScore","resetScore","this","Button","onClick","Component","DisplayAnswers","answer","DisplayQuestions","category","toUpperCase","questions","Content","randomQuestion","a","fetch","baseURL","response","json","result","console","log","question","toggleAnswer","showanswer","Fragment","title","Header","App","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iSAoCeA,EAhCf,kDACI,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,cAAgB,WACd,EAAKC,SAAS,CAACC,MAAO,EAAKC,MAAMD,MAAO,KARvB,EAYpBE,cAAgB,WACb,EAAKH,SAAS,CAACC,MAAO,EAAKC,MAAMD,MAAQ,KAbxB,EAgBnBG,WAAa,WACX,EAAKJ,SAAS,CAACC,MAAO,KAftB,EAAKC,MAAQ,CACXD,MAAO,GAHQ,EADvB,qDAuBM,OACE,6BACE,sCAAYI,KAAKH,MAAMD,OACvB,kBAACK,EAAA,EAAD,CAAQC,QAAUF,KAAKN,eAAvB,KAFF,IAEmD,kBAACO,EAAA,EAAD,CAAQC,QAAUF,KAAKF,eAAvB,KAFnD,IAEoG,kBAACG,EAAA,EAAD,CAAQC,QAAUF,KAAKD,YAAvB,cA1B5G,GAA2BI,aCYZC,EAdf,uKAGM,OACE,6BAEE,uCAAaJ,KAAKP,MAAMY,aANlC,GAAoCF,aCarBG,EAbf,uKAEM,OACE,6BACE,yCAAgBN,KAAKP,MAAMc,SAAUC,eACrC,yCAAeR,KAAKP,MAAMgB,gBALpC,GAAsCN,aC6EvBO,EA1Ef,kDACI,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IAQRkB,eAAiB,WACf,EAAKhB,SAAS,GAAd,sBAAkB,8BAAAiB,EAAA,+EAESC,MAAM,EAAKhB,MAAMiB,SAF1B,cAERC,EAFQ,gBAGOA,EAASC,OAHhB,OAGRC,EAHQ,OAIdC,QAAQC,IAAIF,GACZ,EAAKtB,SAAS,CAAEyB,SAAUH,IALZ,kDAQdC,QAAQC,IAAR,MARc,4DAVD,EA2BnBE,aAAe,WACb,EAAK1B,SAAS,CAAE2B,YAAa,EAAKzB,MAAMyB,cA1BxC,EAAKzB,MAAQ,CACXiB,QAAS,iCACTM,SAAU,KACVE,YAAY,GALG,EADvB,0KAyBMtB,KAAKW,iBAzBX,qIAkCM,OADAO,QAAQC,IAAInB,KAAKH,MAAMuB,UAErB,6BAGE,6BACE,kBAAC,EAAD,OAIF,6BACE,4BAAQlB,QAASF,KAAKW,gBAAtB,mBACA,6BAC2B,OAAxBX,KAAKH,MAAMuB,SAAoB,GAC9B,kBAAC,IAAMG,SAAP,KACE,kBAAC,EAAD,CACEd,UAAWT,KAAKH,MAAMuB,SAAS,GAAGA,SAClCb,SAAUP,KAAKH,MAAMuB,SAAS,GAAGb,SAASiB,QAE5C,6BACE,wBAAItB,QAASF,KAAKqB,eACW,IAA1BrB,KAAKH,MAAMyB,WAAuB,0BACjC,kBAAC,EAAD,CACEjB,OAAQL,KAAKH,MAAMuB,SAAS,GAAGf,mBAxDzD,GAA6BF,aCYdsB,EAdf,uKAGM,OACE,6BAEE,8CANV,GAA4BtB,a,MCYbuB,MATf,WACE,OACE,yBAAKC,MAAO,aACV,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.99670e0f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nexport class Score extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        score: 0\r\n      }\r\n    }\r\n  \r\n    increaseScore = () => {\r\n      this.setState({score: this.state.score +1 })\r\n    }\r\n  \r\n    \r\n   decreaseScore = () => {\r\n      this.setState({score: this.state.score - 1 })\r\n    }\r\n  \r\n    resetScore = () => {\r\n      this.setState({score: 0})\r\n    }\r\n  \r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <h1>Score: {this.state.score}</h1>\r\n          <Button onClick= {this.increaseScore}>+</Button> <Button onClick= {this.decreaseScore}>-</Button> <Button onClick= {this.resetScore}>Reset</Button>\r\n        </div>)\r\n    }\r\n  }\r\n  \r\n  \r\nexport default Score\r\n","import React, { Component } from 'react'\r\n\r\nexport class DisplayAnswers extends Component {\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n  \r\n          <h3>Answer: {this.props.answer}</h3>\r\n  \r\n  \r\n        </div>)\r\n    }\r\n  }\r\n  \r\n\r\nexport default DisplayAnswers\r\n","import React, { Component } from 'react'\r\n\r\nexport class DisplayQuestions extends Component {\r\n    render() {\r\n      return (\r\n        <div>\r\n          <h2>Category: {(this.props.category).toUpperCase()}</h2>\r\n          <h3>Question: {this.props.questions}</h3>\r\n  \r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  \r\n\r\nexport default DisplayQuestions\r\n","import React, { Component } from 'react'\r\nimport Score from './score';\r\nimport DisplayAnswers from './displayanswers';\r\nimport DisplayQuestions from './displayquestions';\r\n\r\nexport class Content extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        baseURL: \"https://jservice.io/api/random\",\r\n        question: null,\r\n        showanswer: false,\r\n      }\r\n    }\r\n  \r\n    randomQuestion = () => {\r\n      this.setState({}, async () => {\r\n        try {\r\n          const response = await fetch(this.state.baseURL);\r\n          const result = await response.json();\r\n          console.log(result)\r\n          this.setState({ question: result })\r\n  \r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n      })\r\n    }\r\n  \r\n    async componentDidMount() {\r\n      this.randomQuestion();\r\n    }\r\n  \r\n    toggleAnswer = () => {\r\n      this.setState({ showanswer: !this.state.showanswer })\r\n    }\r\n  \r\n    render() {\r\n      console.log(this.state.question)\r\n      return (\r\n        <div>\r\n  \r\n  \r\n          <div>\r\n            <Score />\r\n  \r\n          </div>\r\n  \r\n          <div >\r\n            <button onClick={this.randomQuestion}>Random Question</button>\r\n            <div >\r\n              {this.state.question === null ? '' :\r\n                <React.Fragment>\r\n                  <DisplayQuestions\r\n                    questions={this.state.question[0].question}\r\n                    category={this.state.question[0].category.title}\r\n                  />\r\n                  <div>\r\n                    <h2 onClick={this.toggleAnswer}>\r\n                      {this.state.showanswer === false ? 'Click to display answer' :\r\n                        <DisplayAnswers\r\n                          answer={this.state.question[0].answer}\r\n                        />}\r\n                    </h2>\r\n  \r\n                  </div>\r\n  \r\n                </React.Fragment>\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n  \r\n  \r\n      )\r\n    }\r\n  }\r\n  \r\n  \r\nexport default Content\r\n","\r\nimport React, { Component } from 'react'\r\n\r\nexport class Header extends Component {\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n  \r\n          <h1>JEOPARDY!</h1>\r\n  \r\n  \r\n        </div>)\r\n    }\r\n  }\r\n  \r\n\r\nexport default Header\r\n","import React, { Component } from 'react';\nimport Content from './components/content';\nimport Header from './components/header';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div class= \"container\">\n      <Header />\n      <Content />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}